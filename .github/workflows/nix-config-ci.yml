name: nix-config CI

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]

jobs:
  nix-build:
    runs-on: macos-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Install Nix
      uses: cachix/install-nix-action@v24
      with:
        nix_path: nixpkgs=channel:nixos-unstable
        extra_nix_config: |
          experimental-features = nix-command flakes
          
    - name: Setup Cachix
      uses: cachix/cachix-action@v12
      with:
        name: nix-community
        skipPush: true
        
    - name: Check flake syntax
      run: nix flake check --no-build
      
    - name: Build Darwin configuration (dry-run)
      run: nix build .#darwinConfigurations.parsley.system --dry-run
      
    - name: Validate WARP.md compliance
      run: |
        echo "Checking for WARP.md compliance violations..."
        
        # Check for activation scripts (LAW 1)
        if grep -r "system\.activationScripts\|home\.activation" modules/ --exclude-dir=tests; then
          echo "❌ WARP.md LAW 1 violation: Found activation scripts"
          exit 1
        fi
        
        # Check for allowUnfree without predicate (LAW 5)  
        if grep -r "allowUnfree = true" . --exclude-dir=.git; then
          echo "❌ WARP.md LAW 5 violation: Found blanket allowUnfree"
          exit 1
        fi
        
        # Check for proper module organization (LAW 2)
        if find modules/ -name "*.nix" -exec wc -l {} \; | awk '{if($1 > 300) print $2 " has " $1 " lines (>300)"}' | grep -q .; then
          echo "⚠️  Large modules found (>300 lines) - consider splitting"
        fi
        
        echo "✅ WARP.md compliance checks passed"
        
  documentation:
    runs-on: ubuntu-latest  
    steps:
    - uses: actions/checkout@v4
    
    - name: Check documentation consistency
      run: |
        echo "Checking documentation..."
        
        # Verify all modules have documentation
        for module in $(find modules -name "default.nix"); do
          if ! head -20 "$module" | grep -q "description\|#"; then
            echo "⚠️  Module $module may lack documentation"
          fi
        done
        
        # Check for outdated references
        if grep -r "warp.*homebrew\|homebrew.*warp" docs/ --ignore-case; then
          echo "⚠️  Found outdated Warp/Homebrew references in docs"
        fi
        
        echo "✅ Documentation checks completed"
        
  format-check:
    runs-on: ubuntu-latest
    steps: 
    - uses: actions/checkout@v4
    
    - name: Install Nix
      uses: cachix/install-nix-action@v24
      
    - name: Check formatting
      run: |
        nix run nixpkgs#nixfmt-classic -- --check $(find . -name "*.nix" ! -path "./.git/*")
        echo "✅ Nix formatting check completed"